import { describe, test, expect } from 'vitest';

import { transactionHeaderParser } from '@/src/transactionHeader/index';

const cases: [string, Record<string, string>, []][] = [
  [
    `0430012056800585EUR2 0001015614218290323  290323DOMUSVI                          0000000  0000000359190{`,
    {
      _1: '',
      _2: '',
      _3: '',
      '_4:': '',
      record_code: '04',
      bank_code: '30012',
      internal_code: '0568',
      desk_code: '00585',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00010156142',
      operation_code: '18',
      operation_date: '2023-03-29',
      reject_code: '',
      value_date: '2023-03-29',
      label: 'DOMUSVI',
      reference: '0000000',
      exempt_code: '',
      amount: '35919',
    },
    [],
  ],
  [
    `0430012081800585EUR2 00010156142B2290323  290323PRLV SEPA/DGFIP IMPOT                   0 0000000560630}FR46ZZZ005002`,
    {
      _1: '',
      _2: '',
      _3: '',
      record_code: '04',
      bank_code: '30012',
      internal_code: '0818',
      desk_code: '00585',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00010156142',
      operation_code: 'B2',
      operation_date: '2023-03-29',
      reject_code: '',
      value_date: '2023-03-29',
      label: 'PRLV SEPA/DGFIP IMPOT',
      reference: '',
      exempt_code: '0',
      amount: '-56063',
      '_4:': 'FR46ZZZ005002',
    },
    [],
  ],
  [
    `0418020404100001EUR2 00410GXLT0121070423  050423VIREMENT BANCAIRE EN VOTRE FAVE  3175387 00000000594363K000070`,
    {
      _1: '',
      _2: '',
      _3: '0',
      record_code: '04',
      bank_code: '18020',
      internal_code: '4041',
      desk_code: '00001',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00410GXLT01',
      operation_code: '21',
      operation_date: '2023-04-07',
      reject_code: '',
      value_date: '2023-04-05',
      label: 'VIREMENT BANCAIRE EN VOTRE FAVE',
      reference: '3175387',
      exempt_code: '',
      amount: '-59436.32',
      '_4:': '000070',
    },
    [],
  ],
  [
    `041802036BZ00001EUR2 00410FVXE01  010723  010723TVA SUR FRAIS DE GESTION DE CON  5950217 00000000000080}000002`,
    {
      _1: '',
      _2: '',
      _3: '0',
      '_4:': '000002',
      amount: '-8',
      exempt_code: '',
      record_code: '04',
      bank_code: '18020',
      internal_code: '36BZ',
      label: 'TVA SUR FRAIS DE GESTION DE CON',
      desk_code: '00001',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00410FVXE01',
      operation_code: '',
      operation_date: '2023-07-01',
      reference: '5950217',
      reject_code: '',
      value_date: '2023-07-01',
    },
    [],
  ],
  [
    `041802036BZ00001EUR2 00410GXLT01 010323 010323TVA SUR FRAIS DE GESTION DE CON 1891950 00000000000130}000002`,
    {
      _1: '',
      _2: '',
      _3: '0',
      '_4:': '000002',
      record_code: '04',
      bank_code: '18020',
      internal_code: '36BZ',
      desk_code: '00001',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00410GXLT01',
      operation_code: '',
      operation_date: '2023-03-01',
      reject_code: '',
      reference: '1891950',
      value_date: '2023-03-01',
      label: 'TVA SUR FRAIS DE GESTION DE CON',
      exempt_code: '',
      amount: '-13',
    },
    [],
  ],
  [
    '0410278916201084EUR2 00023107391B1110424  110324PRLV SEPA Kreiger - Inc MARKETI  0000010000000000002766K',
    {
      _1: '',
      _2: '',
      _3: '0',
      '_4:': '',
      record_code: '04',
      bank_code: '10278',
      internal_code: '9162',
      desk_code: '01084',
      currency_code: 'EUR',
      nb_of_dec: '2',
      account_nb: '00023107391',
      operation_code: 'B1',
      operation_date: '2024-04-11',
      reject_code: '',
      reference: '0000010',
      value_date: '2024-03-11',
      label: 'PRLV SEPA Kreiger - Inc MARKETI',
      exempt_code: '0',
      amount: '-276.62',
    },
    [],
  ],
];

describe('ebics transaction header parser', () => {
  test.each(cases)('case %#', (text, expectedTransaction, expectedProblems) => {
    const { transaction, problems } = transactionHeaderParser(text);

    expect(transaction).toEqual(expectedTransaction);
    expect(problems).toEqual(expectedProblems);
  });
});
